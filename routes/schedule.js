const express = require('express');
const Schedule = require('../models/Schedule');
const router = express.Router();

// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Sorted)
router.get('/', async (req, res) => {
  try {
      const schedules = await Schedule.find().sort({ date: 1, timeSlot: 1 });

      // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `date` ‡πÄ‡∏õ‡πá‡∏ô `YYYY-MM-DD` ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á frontend
      const formattedSchedules = schedules.map(s => ({
          clientName: s.clientName,
          phoneNumber: s.phoneNumber, // ‚úÖ ‡∏™‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
          date: s.date.toISOString().split('T')[0], // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
          timeSlot: s.timeSlot,
          jobDetails: s.jobDetails // ‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô
      }));

      res.json(formattedSchedules);

  } catch (err) {
      res.status(400).json({ error: err.message });
  }
});

// üìå ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
router.post('/', async (req, res) => {
  let { date, timeSlot, clientName, phoneNumber, jobDetails } = req.body;

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!date || !timeSlot || !clientName || !phoneNumber || !jobDetails) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 9-10 ‡∏´‡∏•‡∏±‡∏Å)
  if (!/^[0-9]{9,10}$/.test(phoneNumber)) {
      return res.status(400).json({ error: "‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 9-10 ‡∏´‡∏•‡∏±‡∏Å)" });
  }

  try {
      // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `date` ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `YYYY-MM-DDT00:00:00.000Z`
      const formattedDate = new Date(date);
      formattedDate.setUTCHours(0, 0, 0, 0); // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 00:00:00 UTC

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const existingSchedule = await Schedule.findOne({ 
          date: formattedDate, 
          timeSlot 
      });

      if (existingSchedule) {
          return res.status(400).json({ error: "‚ùå ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
      }

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á MongoDB
      const newSchedule = new Schedule({ 
          date: formattedDate, 
          timeSlot, 
          clientName, 
          phoneNumber, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
          jobDetails   // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô
      });
      await newSchedule.save();

      res.status(201).json({ message: "‚úÖ ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", data: newSchedule });

  } catch (err) {
      res.status(500).json({ error: err.message });
  }
});

module.exports = router;
